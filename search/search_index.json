{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"github-custom-actions","text":"<p>Python package for creating custom GitHub Actions.</p> <p>How to Create Your Own GitHub Action in 5 Minutes.</p> <p>The package works with Python 3.8 and up, so even those dusty old self-hosted action runners can handle it like champs.</p>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code>from github_custom_actions import ActionBase\n\n\nclass MyAction(ActionBase):\n    def main(self):\n        self.outputs[\"runner-os\"] = self.env.runner_os\n        self.summary.text += self.render(\n            \"### {{ inputs['my-input'] }}.\\nHave a nice day!\",\n        )\n\n\nif __name__ == \"__main__\":\n    MyAction().run()\n</code></pre> <p>This example uses the runner_os variable from GitHub environment variables. All variables from the GitHub environment are available in the <code>env</code>, with descriptions shown in your IDE on mouse hover: </p> <p>The action gets a value from the <code>my-input</code> action input and renders it in the action step summary on the GitHub build summary.</p> <p>It also returns a value to the <code>runner-os</code> action output.</p> <p>The <code>run()</code> in the main block runs the main() that implements your action.</p>"},{"location":"#explicitly-defined-inputs-and-outputs","title":"Explicitly defined inputs and outputs","text":"<p>With explicitly defined inputs and outputs, you can use typo-checked code autocompletion:</p> <pre><code>from pathlib import Path\n\nfrom github_custom_actions import ActionBase, ActionInputs, ActionOutputs\n\n\nclass MyInputs(ActionInputs):\n    my_input: str\n    \"\"\"My input description\"\"\"\n\n    my_path: Path\n    \"\"\"My path description\"\"\"\n\n\nclass MyOutputs(ActionOutputs):\n    runner_os: str\n    \"\"\"Runner OS description\"\"\"\n\n\nclass MyAction(ActionBase):\n    inputs: MyInputs\n    outputs: MyOutputs\n\n    def main(self):\n        if self.inputs.my_path is None:\n            raise ValueError(\"my-path is required\")\n        self.inputs.my_path.mkdir(exist_ok=True)\n        self.outputs.runner_os = self.env.runner_os\n        self.summary.text += self.render(\n            \"### {{ inputs.my_input }}.\\nHave a nice day, {{ inputs['name'] }}!\",\n        )\n\n\nif __name__ == \"__main__\":\n    MyAction().run()\n</code></pre> <p>Note that you only define the types of inputs and outputs, and instances are created automatically upon ActionBase initialization.</p> <p>Now you can utilize the attributes defined in the <code>inputs</code> and <code>outputs</code> classes of the action. All attributes names are converted to <code>kebab-case</code>, allowing dot notation like <code>inputs.my_input</code> to replace the <code>inputs['my-input']</code>.</p> <p>Inputs defined as Path will be converted to <code>Path</code> objects.</p> <p>But still can use the <code>inputs['my-input']</code> style if you prefer.</p>"},{"location":"#example-of-usage","title":"Example of usage","text":"<p>Allure Test Report Action</p>"},{"location":"base/","title":"Base","text":""},{"location":"base/#github_custom_actions.ActionBase","title":"github_custom_actions.ActionBase","text":"<p>Base class for GitHub Actions.</p> <p>You should implement <code>main()</code> method in the subclass.</p> <p>You can define custom inputs and / or outputs types in the subclass. You can do nothing in the subclass if you don't need typed inputs and outputs.</p> <p>Note these are just types, instances of these types are automatically created in the <code>__init__</code> method.</p> <p>Usage: <pre><code>class MyInputs(ActionInputs):\n    my_input: str\n    '''My input description'''\n\n    my_path: Path\n    '''My path description'''\n\nclass MyOutputs(ActionOutputs):\n    runner_os: str\n    '''Runner OS description'''\n\nclass MyAction(ActionBase):\n    inputs: MyInputs\n    outputs: MyOutputs\n\n    def main(self):\n        if self.inputs.my_path is None:\n            raise ValueError(\"my-path is required\")\n        self.inputs.my_path.mkdir(exist_ok=True)\n        self.outputs.runner_os = self.env.runner_os\n        self.summary.text += (\n            self.render(\n                \"### {{ inputs.my_input }}.\\n\"\n                \"Have a nice day, {{ inputs['name'] }}!\"\n            )\n        )\n\nif __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p>"},{"location":"base/#github_custom_actions.ActionBase-attributes","title":"Attributes","text":""},{"location":"base/#github_custom_actions.ActionBase.env","title":"github_custom_actions.ActionBase.env  <code>instance-attribute</code>","text":"<pre><code>env: GithubVars = GithubVars()\n</code></pre>"},{"location":"base/#github_custom_actions.ActionBase.environment","title":"github_custom_actions.ActionBase.environment  <code>instance-attribute</code>","text":"<pre><code>environment = Environment(loader=FileSystemLoader(str(templates_dir)))\n</code></pre>"},{"location":"base/#github_custom_actions.ActionBase.inputs","title":"github_custom_actions.ActionBase.inputs  <code>instance-attribute</code>","text":"<pre><code>inputs: ActionInputs = types['inputs']()\n</code></pre>"},{"location":"base/#github_custom_actions.ActionBase.outputs","title":"github_custom_actions.ActionBase.outputs  <code>instance-attribute</code>","text":"<pre><code>outputs: ActionOutputs = types['outputs']()\n</code></pre>"},{"location":"base/#github_custom_actions.ActionBase.summary","title":"github_custom_actions.ActionBase.summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = FileTextProperty('github_step_summary')\n</code></pre>"},{"location":"base/#github_custom_actions.ActionBase-functions","title":"Functions","text":""},{"location":"base/#github_custom_actions.ActionBase.main","title":"github_custom_actions.ActionBase.main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Business logic of the action.</p> <p>Is called by <code>run()</code> method.</p>"},{"location":"base/#github_custom_actions.ActionBase.render","title":"github_custom_actions.ActionBase.render","text":"<pre><code>render(template: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render the template from the string with Jinja.</p> <p><code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>So you can use something like: <pre><code>self.render(\"### {{ inputs.name }}!\\nHave a nice day!\")\n</code></pre></p>"},{"location":"base/#github_custom_actions.ActionBase.render_template","title":"github_custom_actions.ActionBase.render_template","text":"<pre><code>render_template(template_name: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render template from the <code>templates</code> directory.</p> <p><code>template_name</code> is the name of the template file without the extension. <code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>Usage: <pre><code>self.render_template(\"executor.json\", image=\"ubuntu-latest\")\n</code></pre></p>"},{"location":"base/#github_custom_actions.ActionBase.run","title":"github_custom_actions.ActionBase.run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the action.</p> <p><code>run()</code> calls the <code>main()</code> method of the action with the necessary boilerplate to catch and report exceptions.</p> <p>Usage: <pre><code>if __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p> <p><code>main()</code> is where you implement the business logic of your action.</p>"},{"location":"github_env_vars/","title":"Github variables","text":"<p>In the <code>vars</code> attribute of the action class, you can access all the environment variables provided by GitHub.</p> <p>The library provides a full list of GitHub environment variables, including descriptions.</p> <p>Paths and files have type Path.</p> <pre><code>from github_custom_actions import ActionBase\n\n\nclass MyAction(ActionBase):\n    def main(self):\n        self.outputs[\"runner-os\"] = self.env.runner_os\n        self.summary.text += self.render(\n            \"### {{ inputs['my-input'] }}.\\nHave a nice day!\",\n        )\n\n\nif __name__ == \"__main__\":\n    MyAction().run()\n</code></pre> <p>IDE autocomplete and hover documentation are supported: .</p> <p>If accessed through a dictionary, the variable name remains unchanged; if accessed through class attributes, the attribute name is converted to uppercase. So <code>action.env[\"GITHUB_REPOSITORY\"]</code> and <code>action.env.github_repository</code> refer to the same variable.</p> <p>This way with dictionary-like syntax you can access to any environment variable, not only set by Github.</p> <p>For implementation details, see GithubVars.</p>"},{"location":"inputs/","title":"Inputs","text":"<p>               Bases: <code>EnvAttrDictVars</code></p> <p>GitHub Action input variables.</p> <p>Usage:     <pre><code>class MyInputs(ActionInputs):\n    my_input: str\n\naction = ActionBase(inputs=MyInputs())\nprint(action.inputs.my_input)\nprint(action.inputs[\"my-input\"])  # the same as above\n</code></pre></p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Attribute names are converted to <code>kebab-case</code>. So <code>action.inputs.my_input</code> is the same as <code>action.inputs[\"my-input\"]</code>.</p> <p>If you need to access a <code>snake_case</code> named input <code>my_input</code>, you should use dict-style only: <code>action.inputs[\"my_input\"]</code>. But it's common to use <code>kebab-case</code> in GitHub Actions input names.</p> <p>By GitHub convention, all input names are upper-cased in the environment and prefixed with \"INPUT_\". So <code>actions.inputs.my_input</code> or <code>actions.inputs['my-input']</code> will be the variable <code>INPUT_MY-INPUT</code> in the environment. The ActionInputs does the conversion automatically.</p> <p>Uses lazy loading of the values. So the value is read from the environment only when accessed and only once, and saved in the object's internal dict.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-pipx","title":"Installing pipx","text":"<p><code>pipx</code> creates isolated environments to avoid conflicts with existing system packages.</p> MacOSLinuxWindows <p>In the terminal, execute: <pre><code>brew install pipx\npipx ensurepath\n</code></pre></p> <p>First, ensure Python is installed.</p> <p>Enter in the terminal:</p> <pre><code>python3 -m pip install --user pipx\npython3 -m pipx ensurepath\n</code></pre> <p>First, install Python if it's not already installed.</p> <p>In the command prompt, type (if Python was installed from the Microsoft Store, use <code>python3</code> instead of <code>python</code>):</p> <pre><code>python -m pip install --user pipx\n</code></pre>"},{"location":"installation/#installing-github-custom-actions","title":"Installing <code>github-custom-actions</code>:","text":"<p>In the terminal (command prompt), execute:</p> <pre><code>pipx install github-custom-actions\n</code></pre>"},{"location":"main/","title":"main()","text":"<p><code>main()</code> is called from <code>run()</code>:</p>"},{"location":"main/#github_custom_actions.ActionBase.run","title":"github_custom_actions.ActionBase.run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the action.</p> <p><code>run()</code> calls the <code>main()</code> method of the action with the necessary boilerplate to catch and report exceptions.</p> <p>Usage: <pre><code>if __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p> <p><code>main()</code> is where you implement the business logic of your action.</p>"},{"location":"outputs/","title":"Outputs","text":"<p>               Bases: <code>FileAttrDictVars</code></p> <p>GitHub Actions output variables.</p> <p>Usage:    <pre><code>class MyOutputs(ActionOutputs):\n    my_output: str\n\naction = ActionBase(outputs=MyOutputs())\naction.outputs[\"my-output\"] = \"value\"\naction.outputs.my_output = \"value\"  # the same as above\n</code></pre></p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Attribute names are converted to <code>kebab-case</code>. So <code>action.outputs.my_output</code> is the same as <code>action.outputs[\"my-output\"]</code>.</p> <p>If you need to access a <code>snake_case</code> named output like <code>my_output</code> you should use dict-style only: <code>action.outputs[\"my_output\"]</code>. But it's common to use <code>kebab-case</code> in GitHub Actions output names.</p> <p>Each output var assignment changes the GitHub outputs file (the path is defined as <code>action.env.github_output</code>).</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#github_custom_actions","title":"github_custom_actions","text":"<p>Python package for creating custom GitHub Actions.</p> <p>The file is mandatory for build system to find the package.</p>"},{"location":"reference/#github_custom_actions-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.ActionBase","title":"github_custom_actions.ActionBase","text":"<p>Base class for GitHub Actions.</p> <p>You should implement <code>main()</code> method in the subclass.</p> <p>You can define custom inputs and / or outputs types in the subclass. You can do nothing in the subclass if you don't need typed inputs and outputs.</p> <p>Note these are just types, instances of these types are automatically created in the <code>__init__</code> method.</p> <p>Usage: <pre><code>class MyInputs(ActionInputs):\n    my_input: str\n    '''My input description'''\n\n    my_path: Path\n    '''My path description'''\n\nclass MyOutputs(ActionOutputs):\n    runner_os: str\n    '''Runner OS description'''\n\nclass MyAction(ActionBase):\n    inputs: MyInputs\n    outputs: MyOutputs\n\n    def main(self):\n        if self.inputs.my_path is None:\n            raise ValueError(\"my-path is required\")\n        self.inputs.my_path.mkdir(exist_ok=True)\n        self.outputs.runner_os = self.env.runner_os\n        self.summary.text += (\n            self.render(\n                \"### {{ inputs.my_input }}.\\n\"\n                \"Have a nice day, {{ inputs['name'] }}!\"\n            )\n        )\n\nif __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p>"},{"location":"reference/#github_custom_actions.ActionBase-attributes","title":"Attributes","text":""},{"location":"reference/#github_custom_actions.ActionBase.env","title":"github_custom_actions.ActionBase.env  <code>instance-attribute</code>","text":"<pre><code>env: GithubVars = GithubVars()\n</code></pre>"},{"location":"reference/#github_custom_actions.ActionBase.environment","title":"github_custom_actions.ActionBase.environment  <code>instance-attribute</code>","text":"<pre><code>environment = Environment(loader=FileSystemLoader(str(templates_dir)))\n</code></pre>"},{"location":"reference/#github_custom_actions.ActionBase.inputs","title":"github_custom_actions.ActionBase.inputs  <code>instance-attribute</code>","text":"<pre><code>inputs: ActionInputs = types['inputs']()\n</code></pre>"},{"location":"reference/#github_custom_actions.ActionBase.outputs","title":"github_custom_actions.ActionBase.outputs  <code>instance-attribute</code>","text":"<pre><code>outputs: ActionOutputs = types['outputs']()\n</code></pre>"},{"location":"reference/#github_custom_actions.ActionBase.summary","title":"github_custom_actions.ActionBase.summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = FileTextProperty('github_step_summary')\n</code></pre>"},{"location":"reference/#github_custom_actions.ActionBase-functions","title":"Functions","text":""},{"location":"reference/#github_custom_actions.ActionBase.main","title":"github_custom_actions.ActionBase.main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Business logic of the action.</p> <p>Is called by <code>run()</code> method.</p>"},{"location":"reference/#github_custom_actions.ActionBase.render","title":"github_custom_actions.ActionBase.render","text":"<pre><code>render(template: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render the template from the string with Jinja.</p> <p><code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>So you can use something like: <pre><code>self.render(\"### {{ inputs.name }}!\\nHave a nice day!\")\n</code></pre></p>"},{"location":"reference/#github_custom_actions.ActionBase.render_template","title":"github_custom_actions.ActionBase.render_template","text":"<pre><code>render_template(template_name: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render template from the <code>templates</code> directory.</p> <p><code>template_name</code> is the name of the template file without the extension. <code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>Usage: <pre><code>self.render_template(\"executor.json\", image=\"ubuntu-latest\")\n</code></pre></p>"},{"location":"reference/#github_custom_actions.ActionBase.run","title":"github_custom_actions.ActionBase.run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the action.</p> <p><code>run()</code> calls the <code>main()</code> method of the action with the necessary boilerplate to catch and report exceptions.</p> <p>Usage: <pre><code>if __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p> <p><code>main()</code> is where you implement the business logic of your action.</p>"},{"location":"reference/#github_custom_actions.ActionInputs","title":"github_custom_actions.ActionInputs","text":"<p>               Bases: <code>EnvAttrDictVars</code></p> <p>GitHub Action input variables.</p> <p>Usage:     <pre><code>class MyInputs(ActionInputs):\n    my_input: str\n\naction = ActionBase(inputs=MyInputs())\nprint(action.inputs.my_input)\nprint(action.inputs[\"my-input\"])  # the same as above\n</code></pre></p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Attribute names are converted to <code>kebab-case</code>. So <code>action.inputs.my_input</code> is the same as <code>action.inputs[\"my-input\"]</code>.</p> <p>If you need to access a <code>snake_case</code> named input <code>my_input</code>, you should use dict-style only: <code>action.inputs[\"my_input\"]</code>. But it's common to use <code>kebab-case</code> in GitHub Actions input names.</p> <p>By GitHub convention, all input names are upper-cased in the environment and prefixed with \"INPUT_\". So <code>actions.inputs.my_input</code> or <code>actions.inputs['my-input']</code> will be the variable <code>INPUT_MY-INPUT</code> in the environment. The ActionInputs does the conversion automatically.</p> <p>Uses lazy loading of the values. So the value is read from the environment only when accessed and only once, and saved in the object's internal dict.</p>"},{"location":"reference/#github_custom_actions.ActionOutputs","title":"github_custom_actions.ActionOutputs","text":"<p>               Bases: <code>FileAttrDictVars</code></p> <p>GitHub Actions output variables.</p> <p>Usage:    <pre><code>class MyOutputs(ActionOutputs):\n    my_output: str\n\naction = ActionBase(outputs=MyOutputs())\naction.outputs[\"my-output\"] = \"value\"\naction.outputs.my_output = \"value\"  # the same as above\n</code></pre></p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Attribute names are converted to <code>kebab-case</code>. So <code>action.outputs.my_output</code> is the same as <code>action.outputs[\"my-output\"]</code>.</p> <p>If you need to access a <code>snake_case</code> named output like <code>my_output</code> you should use dict-style only: <code>action.outputs[\"my_output\"]</code>. But it's common to use <code>kebab-case</code> in GitHub Actions output names.</p> <p>Each output var assignment changes the GitHub outputs file (the path is defined as <code>action.env.github_output</code>).</p>"},{"location":"reference/#github_custom_actions.GithubVars","title":"github_custom_actions.GithubVars","text":"<p>               Bases: <code>EnvAttrDictVars</code></p> <p>GitHub Action environment variables.</p> <p>https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables</p> <p>Usage:    <pre><code>class MyAction:\n    @property\n    def env(self):\n        return GithubVars()\n\naction = MyAction()\nprint(action.env.github_repository)\n</code></pre></p> <p>Thanks to the docstrings your IDE will provide you with doc hints when you hover over the property. We do not load the attributes on the class init but do it Lazily. Once read, the value is stored in the instance dictionary and is not extracted from env anymore.</p> <p>Converts attribute names to uppercase. Leave dict-style names unchanged.</p> <p>Paths and files have type Path.</p>"},{"location":"reference/#github_custom_actions.GithubVars-attributes","title":"Attributes","text":""},{"location":"reference/#github_custom_actions.GithubVars.CI","title":"github_custom_actions.GithubVars.CI  <code>instance-attribute</code>","text":"<pre><code>CI: str\n</code></pre> <p>Always set to true.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_action","title":"github_custom_actions.GithubVars.github_action  <code>instance-attribute</code>","text":"<pre><code>github_action: str\n</code></pre> <p>The name of the action currently running, or the id of a step. For example, for an action, __repo-owner_name-of-action-repo. GitHub removes special characters, and uses the name __run when the current step runs a script without an id. If you use the same script or action more than once in the same job, the name will include a suffix that consists of the sequence number preceded by an underscore. For example, the first script you run will have the name __run, and the second script will be named __run_2. Similarly, the second invocation of actions/checkout will be actionscheckout2.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_action_path","title":"github_custom_actions.GithubVars.github_action_path  <code>instance-attribute</code>","text":"<pre><code>github_action_path: Path\n</code></pre> <p>The path where an action is located. This property is only supported in composite actions. You can use this path to change directories to where the action is located and access other files in that same repository. For example, /home/runner/work/_actions/repo-owner/name-of-action-repo/v1.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_action_repository","title":"github_custom_actions.GithubVars.github_action_repository  <code>instance-attribute</code>","text":"<pre><code>github_action_repository: str\n</code></pre> <p>For a step executing an action, this is the owner and repository name of the action. For example, actions/checkout.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_actions","title":"github_custom_actions.GithubVars.github_actions  <code>instance-attribute</code>","text":"<pre><code>github_actions: str\n</code></pre> <p>Always set to true when GitHub Actions is running the workflow. You can use this variable to differentiate when tests are being run locally or by GitHub Actions.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_actor","title":"github_custom_actions.GithubVars.github_actor  <code>instance-attribute</code>","text":"<pre><code>github_actor: str\n</code></pre> <p>The name of the person or app that initiated the workflow. For example, octocat.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_actor_id","title":"github_custom_actions.GithubVars.github_actor_id  <code>instance-attribute</code>","text":"<pre><code>github_actor_id: str\n</code></pre> <p>The account ID of the person or app that triggered the initial workflow run. For example, 1234567. Note that this is different from the actor username.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_api_url","title":"github_custom_actions.GithubVars.github_api_url  <code>instance-attribute</code>","text":"<pre><code>github_api_url: str\n</code></pre> <p>Returns the API URL. For example: https://api.github.com.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_base_ref","title":"github_custom_actions.GithubVars.github_base_ref  <code>instance-attribute</code>","text":"<pre><code>github_base_ref: str\n</code></pre> <p>The name of the base ref or target branch of the pull request in a workflow run. This is only set when the event that triggers a workflow run is either pull_request or pull_request_target. For example, main.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_env","title":"github_custom_actions.GithubVars.github_env  <code>instance-attribute</code>","text":"<pre><code>github_env: str\n</code></pre> <p>The path on the runner to the file that sets variables from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/work/_temp/_runner_file_commands/set_env_87406d6e-4979-4d42-98e1-3dab1f48b13a. For more information, see \"Workflow commands for GitHub Actions\".</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_event_name","title":"github_custom_actions.GithubVars.github_event_name  <code>instance-attribute</code>","text":"<pre><code>github_event_name: str\n</code></pre> <p>The name of the event that triggered the workflow. For example, workflow_dispatch.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_event_path","title":"github_custom_actions.GithubVars.github_event_path  <code>instance-attribute</code>","text":"<pre><code>github_event_path: Path\n</code></pre> <p>The path to the file on the runner that contains the full event webhook payload. For example, /github/workflow/event.json.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_graphql_url","title":"github_custom_actions.GithubVars.github_graphql_url  <code>instance-attribute</code>","text":"<pre><code>github_graphql_url: str\n</code></pre> <p>Returns the GraphQL API URL. For example: https://api.github.com/graphql.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_head_ref","title":"github_custom_actions.GithubVars.github_head_ref  <code>instance-attribute</code>","text":"<pre><code>github_head_ref: str\n</code></pre> <p>The head ref or source branch of the pull request in a workflow run. This property is only set when the event that triggers a workflow run is either pull_request or pull_request_target. For example, feature-branch-1.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_job","title":"github_custom_actions.GithubVars.github_job  <code>instance-attribute</code>","text":"<pre><code>github_job: str\n</code></pre> <p>The job_id of the current job. For example, greeting_job.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_output","title":"github_custom_actions.GithubVars.github_output  <code>instance-attribute</code>","text":"<pre><code>github_output: Path\n</code></pre> <p>The path on the runner to the file that sets the current step's outputs from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/work/_temp/_runner_file_commands/set_output_a50ef383-b063-46d9-9157-57953fc9f3f0. For more information, see \"Workflow commands for GitHub Actions\".</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_path","title":"github_custom_actions.GithubVars.github_path  <code>instance-attribute</code>","text":"<pre><code>github_path: Path\n</code></pre> <p>The path on the runner to the file that sets system PATH variables from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/work/_temp/_runner_file_commands/add_path_899b9445-ad4a-400c-aa89-249f18632cf5. For more information, see \"Workflow commands for GitHub Actions\".</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_ref","title":"github_custom_actions.GithubVars.github_ref  <code>instance-attribute</code>","text":"<pre><code>github_ref: str\n</code></pre> <p>The fully-formed ref of the branch or tag that triggered the workflow run. For workflows triggered by push, this is the branch or tag ref that was pushed. For workflows triggered by pull_request, this is the pull request merge branch. For workflows triggered by release, this is the release tag created. For other triggers, this is the branch or tag ref that triggered the workflow run. This is only set if a branch or tag is available for the event type. The ref given is fully-formed, meaning that for branches the format is refs/heads/, for pull requests it is refs/pull//merge, and for tags it is refs/tags/. For example, refs/heads/feature-branch-1."},{"location":"reference/#github_custom_actions.GithubVars.github_ref_name","title":"github_custom_actions.GithubVars.github_ref_name  <code>instance-attribute</code>","text":"<pre><code>github_ref_name: str\n</code></pre> <p>The short ref name of the branch or tag that triggered the workflow run. This value matches the branch or tag name shown on GitHub. For example, feature-branch-1. For pull requests, the format is /merge."},{"location":"reference/#github_custom_actions.GithubVars.github_ref_protected","title":"github_custom_actions.GithubVars.github_ref_protected  <code>instance-attribute</code>","text":"<pre><code>github_ref_protected: str\n</code></pre> <p>true if branch protections or rulesets are configured for the ref that triggered the workflow run.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_ref_type","title":"github_custom_actions.GithubVars.github_ref_type  <code>instance-attribute</code>","text":"<pre><code>github_ref_type: str\n</code></pre> <p>The type of ref that triggered the workflow run. Valid values are branch or tag.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_repository","title":"github_custom_actions.GithubVars.github_repository  <code>instance-attribute</code>","text":"<pre><code>github_repository: str\n</code></pre> <p>The owner and repository name. For example, octocat/Hello-World.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_repository_id","title":"github_custom_actions.GithubVars.github_repository_id  <code>instance-attribute</code>","text":"<pre><code>github_repository_id: str\n</code></pre> <p>The ID of the repository. For example, 123456789. Note that this is different from the repository name.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_repository_owner","title":"github_custom_actions.GithubVars.github_repository_owner  <code>instance-attribute</code>","text":"<pre><code>github_repository_owner: str\n</code></pre> <p>The repository owner's name. For example, octocat.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_repository_owner_id","title":"github_custom_actions.GithubVars.github_repository_owner_id  <code>instance-attribute</code>","text":"<pre><code>github_repository_owner_id: str\n</code></pre> <p>The repository owner's account ID. For example, 1234567. Note that this is different from the owner's name.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_retention_days","title":"github_custom_actions.GithubVars.github_retention_days  <code>instance-attribute</code>","text":"<pre><code>github_retention_days: str\n</code></pre> <p>The number of days that workflow run logs and artifacts are kept. For example, 90.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_run_attempt","title":"github_custom_actions.GithubVars.github_run_attempt  <code>instance-attribute</code>","text":"<pre><code>github_run_attempt: str\n</code></pre> <p>A unique number for each attempt of a particular workflow run in a repository. This number begins at 1 for the workflow run's first attempt, and increments with each re-run. For example, 3.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_run_id","title":"github_custom_actions.GithubVars.github_run_id  <code>instance-attribute</code>","text":"<pre><code>github_run_id: str\n</code></pre> <p>A unique number for each workflow run within a repository. This number does not change if you re-run the workflow run. For example, 1658821493.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_run_number","title":"github_custom_actions.GithubVars.github_run_number  <code>instance-attribute</code>","text":"<pre><code>github_run_number: str\n</code></pre> <p>A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run. For example, 3.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_server_url","title":"github_custom_actions.GithubVars.github_server_url  <code>instance-attribute</code>","text":"<pre><code>github_server_url: str\n</code></pre> <p>The URL of the GitHub server. For example: https://github.com.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_sha","title":"github_custom_actions.GithubVars.github_sha  <code>instance-attribute</code>","text":"<pre><code>github_sha: str\n</code></pre> <p>The commit SHA that triggered the workflow. The value of this commit SHA depends on the event that triggered the workflow. For more information, see \"Events that trigger workflows.\" For example, ffac537e6cbbf934b08745a378932722df287a53.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_step_summary","title":"github_custom_actions.GithubVars.github_step_summary  <code>instance-attribute</code>","text":"<pre><code>github_step_summary: Path\n</code></pre> <p>The path on the runner to the file that contains job summaries from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/_layout/_work/_temp/_runner_file_commands/step_summary_1cb22d7f-5663-41a8- 9ffc-13472605c76c. For more information, see \"Workflow commands for GitHub Actions\".</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_triggering_actor","title":"github_custom_actions.GithubVars.github_triggering_actor  <code>instance-attribute</code>","text":"<pre><code>github_triggering_actor: str\n</code></pre> <p>The username of the user that initiated the workflow run. If the workflow run is a re-run, this value may differ from github.actor. Any workflow re-runs will use the privileges of github.actor, even if the actor initiating the re-run (github.triggering_actor) has different privileges.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_workflow","title":"github_custom_actions.GithubVars.github_workflow  <code>instance-attribute</code>","text":"<pre><code>github_workflow: str\n</code></pre> <p>The name of the workflow. For example, My test workflow. If the workflow file doesn't specify a name, the value of this variable is the full path of the workflow file in the repository.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_workflow_ref","title":"github_custom_actions.GithubVars.github_workflow_ref  <code>instance-attribute</code>","text":"<pre><code>github_workflow_ref: str\n</code></pre> <p>The ref path to the workflow. For example, octocat/hello-world/.github/workflows/my-workflow.yml@ refs/heads/my_branch.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_workflow_sha","title":"github_custom_actions.GithubVars.github_workflow_sha  <code>instance-attribute</code>","text":"<pre><code>github_workflow_sha: str\n</code></pre> <p>The commit SHA for the workflow file.</p>"},{"location":"reference/#github_custom_actions.GithubVars.github_workspace","title":"github_custom_actions.GithubVars.github_workspace  <code>instance-attribute</code>","text":"<pre><code>github_workspace: Path\n</code></pre> <p>The default working directory on the runner for steps, and the default location of your repository when using the checkout action. For example, /home/runner/work/my-repo-name/my-repo-name.</p>"},{"location":"reference/#github_custom_actions.GithubVars.runner_arch","title":"github_custom_actions.GithubVars.runner_arch  <code>instance-attribute</code>","text":"<pre><code>runner_arch: str\n</code></pre> <p>The architecture of the runner executing the job. Possible values are X86, X64, ARM, or ARM64.</p>"},{"location":"reference/#github_custom_actions.GithubVars.runner_debug","title":"github_custom_actions.GithubVars.runner_debug  <code>instance-attribute</code>","text":"<pre><code>runner_debug: str\n</code></pre> <p>This is set only if debug logging is enabled, and always has the value of 1. It can be useful as an indicator to enable additional debugging or verbose logging in your own job steps.</p>"},{"location":"reference/#github_custom_actions.GithubVars.runner_name","title":"github_custom_actions.GithubVars.runner_name  <code>instance-attribute</code>","text":"<pre><code>runner_name: str\n</code></pre> <p>The name of the runner executing the job. This name may not be unique in a workflow run as runners at the repository and organization levels could use the same name. For example, Hosted Agent</p>"},{"location":"reference/#github_custom_actions.GithubVars.runner_os","title":"github_custom_actions.GithubVars.runner_os  <code>instance-attribute</code>","text":"<pre><code>runner_os: str\n</code></pre> <p>The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS. For example, Windows</p>"},{"location":"reference/#github_custom_actions.GithubVars.runner_temp","title":"github_custom_actions.GithubVars.runner_temp  <code>instance-attribute</code>","text":"<pre><code>runner_temp: Path\n</code></pre> <p>The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them. For example, D:\\a_temp</p>"},{"location":"reference/#github_custom_actions.GithubVars.runner_tool_cache","title":"github_custom_actions.GithubVars.runner_tool_cache  <code>instance-attribute</code>","text":"<pre><code>runner_tool_cache: str\n</code></pre> <p>The path to the directory containing preinstalled tools for GitHub-hosted runners. For more information, see \"Using GitHub-hosted runners\". For example, C:\\hostedtoolcache\\windows</p>"},{"location":"reference/#github_custom_actions-modules","title":"Modules","text":""},{"location":"reference/#github_custom_actions.action_base","title":"github_custom_actions.action_base","text":""},{"location":"reference/#github_custom_actions.action_base-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.action_base.ActionBase","title":"github_custom_actions.action_base.ActionBase","text":"<p>Base class for GitHub Actions.</p> <p>You should implement <code>main()</code> method in the subclass.</p> <p>You can define custom inputs and / or outputs types in the subclass. You can do nothing in the subclass if you don't need typed inputs and outputs.</p> <p>Note these are just types, instances of these types are automatically created in the <code>__init__</code> method.</p> <p>Usage: <pre><code>class MyInputs(ActionInputs):\n    my_input: str\n    '''My input description'''\n\n    my_path: Path\n    '''My path description'''\n\nclass MyOutputs(ActionOutputs):\n    runner_os: str\n    '''Runner OS description'''\n\nclass MyAction(ActionBase):\n    inputs: MyInputs\n    outputs: MyOutputs\n\n    def main(self):\n        if self.inputs.my_path is None:\n            raise ValueError(\"my-path is required\")\n        self.inputs.my_path.mkdir(exist_ok=True)\n        self.outputs.runner_os = self.env.runner_os\n        self.summary.text += (\n            self.render(\n                \"### {{ inputs.my_input }}.\\n\"\n                \"Have a nice day, {{ inputs['name'] }}!\"\n            )\n        )\n\nif __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p> Attributes <code></code> github_custom_actions.action_base.ActionBase.env <code>instance-attribute</code> <pre><code>env: GithubVars = GithubVars()\n</code></pre> <code></code> github_custom_actions.action_base.ActionBase.environment <code>instance-attribute</code> <pre><code>environment = Environment(loader=FileSystemLoader(str(templates_dir)))\n</code></pre> <code></code> github_custom_actions.action_base.ActionBase.inputs <code>instance-attribute</code> <pre><code>inputs: ActionInputs = types['inputs']()\n</code></pre> <code></code> github_custom_actions.action_base.ActionBase.outputs <code>instance-attribute</code> <pre><code>outputs: ActionOutputs = types['outputs']()\n</code></pre> <code></code> github_custom_actions.action_base.ActionBase.summary <code>class-attribute</code> <code>instance-attribute</code> <pre><code>summary = FileTextProperty('github_step_summary')\n</code></pre> Functions <code></code> github_custom_actions.action_base.ActionBase.main <pre><code>main() -&gt; None\n</code></pre> <p>Business logic of the action.</p> <p>Is called by <code>run()</code> method.</p> <code></code> github_custom_actions.action_base.ActionBase.render <pre><code>render(template: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render the template from the string with Jinja.</p> <p><code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>So you can use something like: <pre><code>self.render(\"### {{ inputs.name }}!\\nHave a nice day!\")\n</code></pre></p> <code></code> github_custom_actions.action_base.ActionBase.render_template <pre><code>render_template(template_name: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render template from the <code>templates</code> directory.</p> <p><code>template_name</code> is the name of the template file without the extension. <code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>Usage: <pre><code>self.render_template(\"executor.json\", image=\"ubuntu-latest\")\n</code></pre></p> <code></code> github_custom_actions.action_base.ActionBase.run <pre><code>run() -&gt; None\n</code></pre> <p>Run the action.</p> <p><code>run()</code> calls the <code>main()</code> method of the action with the necessary boilerplate to catch and report exceptions.</p> <p>Usage: <pre><code>if __name__ == \"__main__\":\n    MyAction().run()\n</code></pre></p> <p><code>main()</code> is where you implement the business logic of your action.</p>"},{"location":"reference/#github_custom_actions.action_base.FileTextProperty","title":"github_custom_actions.action_base.FileTextProperty","text":"<p>Property descriptor read / write from a file.</p> Attributes github_custom_actions.action_base.FileTextProperty.var_name <code>instance-attribute</code> <pre><code>var_name = var_name\n</code></pre>"},{"location":"reference/#github_custom_actions.attr_dict_vars","title":"github_custom_actions.attr_dict_vars","text":""},{"location":"reference/#github_custom_actions.attr_dict_vars-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.attr_dict_vars.AttrDictVars","title":"github_custom_actions.attr_dict_vars.AttrDictVars","text":"<p>Common base class for accessing variables as attributes or dict.</p> Functions github_custom_actions.attr_dict_vars.AttrDictVars.get_type_hints <code>classmethod</code> <pre><code>get_type_hints() -&gt; Dict[str, Any]\n</code></pre>"},{"location":"reference/#github_custom_actions.env_attr_dict_vars","title":"github_custom_actions.env_attr_dict_vars","text":""},{"location":"reference/#github_custom_actions.env_attr_dict_vars-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.env_attr_dict_vars.EnvAttrDictVars","title":"github_custom_actions.env_attr_dict_vars.EnvAttrDictVars","text":"<p>               Bases: <code>AttrDictVars</code></p> <p>Dual access env vars.</p> <p>Access to env vars as object attributes or as dict items. Do not allow changing vars, so this is a read-only source of env vars values.</p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Usage:    <pre><code>class MyVars(EnvAttrDictVars):\n    documented_var: str\n\nvars = MyVars(prefix=\"INPUT_\")\nprint(vars[\"undocumented_var\"])  # from os.environ[\"INPUT_UNDOCUMENTED_VAR\"]\nprint(vars.documented_var)  # from os.environ[\"INPUT_DOCUMENTED-VAR\"]\n</code></pre></p> <p>Attribute names are converted with the method <code>_attr_to_var_name()</code> - it converts Python attribute names from snake_case to kebab-case.</p>"},{"location":"reference/#github_custom_actions.file_attr_dict_vars","title":"github_custom_actions.file_attr_dict_vars","text":""},{"location":"reference/#github_custom_actions.file_attr_dict_vars-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.file_attr_dict_vars.FileAttrDictVars","title":"github_custom_actions.file_attr_dict_vars.FileAttrDictVars","text":"<p>               Bases: <code>AttrDictVars</code>, <code>MutableMapping</code></p> <p>Dual access vars in a file.</p> <p>File contains vars as <code>key=value</code> lines. Access with attributes or as dict.</p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Usage:    class MyVars(FileAttrDictVars):        documented_var: str</p> <p>vars = MyVars(Path(\"my_vars.txt\"))    vars[\"undocumented_var\"] = \"value1\"    vars.documented_var == \"value2\"</p> <p># Produces \"my_vars.txt\" with:    #    documented-var=value2    #    undocumented_var=value1</p> <p>On read/write, it converts var names with <code>_name_from_external()</code>/<code>_external_name()</code> methods. They remove/add <code>_external_name_prefix</code> to the names.</p> <p>Attribute access also uses <code>_attr_to_var_name()</code> - by default it converts Python attribute names from snake_case to kebab-case.</p>"},{"location":"reference/#github_custom_actions.github_vars","title":"github_custom_actions.github_vars","text":""},{"location":"reference/#github_custom_actions.github_vars-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.github_vars.GithubVars","title":"github_custom_actions.github_vars.GithubVars","text":"<p>               Bases: <code>EnvAttrDictVars</code></p> <p>GitHub Action environment variables.</p> <p>https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables</p> <p>Usage:    <pre><code>class MyAction:\n    @property\n    def env(self):\n        return GithubVars()\n\naction = MyAction()\nprint(action.env.github_repository)\n</code></pre></p> <p>Thanks to the docstrings your IDE will provide you with doc hints when you hover over the property. We do not load the attributes on the class init but do it Lazily. Once read, the value is stored in the instance dictionary and is not extracted from env anymore.</p> <p>Converts attribute names to uppercase. Leave dict-style names unchanged.</p> <p>Paths and files have type Path.</p> Attributes <code></code> github_custom_actions.github_vars.GithubVars.CI <code>instance-attribute</code> <pre><code>CI: str\n</code></pre> <p>Always set to true.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_action <code>instance-attribute</code> <pre><code>github_action: str\n</code></pre> <p>The name of the action currently running, or the id of a step. For example, for an action, __repo-owner_name-of-action-repo. GitHub removes special characters, and uses the name __run when the current step runs a script without an id. If you use the same script or action more than once in the same job, the name will include a suffix that consists of the sequence number preceded by an underscore. For example, the first script you run will have the name __run, and the second script will be named __run_2. Similarly, the second invocation of actions/checkout will be actionscheckout2.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_action_path <code>instance-attribute</code> <pre><code>github_action_path: Path\n</code></pre> <p>The path where an action is located. This property is only supported in composite actions. You can use this path to change directories to where the action is located and access other files in that same repository. For example, /home/runner/work/_actions/repo-owner/name-of-action-repo/v1.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_action_repository <code>instance-attribute</code> <pre><code>github_action_repository: str\n</code></pre> <p>For a step executing an action, this is the owner and repository name of the action. For example, actions/checkout.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_actions <code>instance-attribute</code> <pre><code>github_actions: str\n</code></pre> <p>Always set to true when GitHub Actions is running the workflow. You can use this variable to differentiate when tests are being run locally or by GitHub Actions.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_actor <code>instance-attribute</code> <pre><code>github_actor: str\n</code></pre> <p>The name of the person or app that initiated the workflow. For example, octocat.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_actor_id <code>instance-attribute</code> <pre><code>github_actor_id: str\n</code></pre> <p>The account ID of the person or app that triggered the initial workflow run. For example, 1234567. Note that this is different from the actor username.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_api_url <code>instance-attribute</code> <pre><code>github_api_url: str\n</code></pre> <p>Returns the API URL. For example: https://api.github.com.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_base_ref <code>instance-attribute</code> <pre><code>github_base_ref: str\n</code></pre> <p>The name of the base ref or target branch of the pull request in a workflow run. This is only set when the event that triggers a workflow run is either pull_request or pull_request_target. For example, main.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_env <code>instance-attribute</code> <pre><code>github_env: str\n</code></pre> <p>The path on the runner to the file that sets variables from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/work/_temp/_runner_file_commands/set_env_87406d6e-4979-4d42-98e1-3dab1f48b13a. For more information, see \"Workflow commands for GitHub Actions\".</p> <code></code> github_custom_actions.github_vars.GithubVars.github_event_name <code>instance-attribute</code> <pre><code>github_event_name: str\n</code></pre> <p>The name of the event that triggered the workflow. For example, workflow_dispatch.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_event_path <code>instance-attribute</code> <pre><code>github_event_path: Path\n</code></pre> <p>The path to the file on the runner that contains the full event webhook payload. For example, /github/workflow/event.json.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_graphql_url <code>instance-attribute</code> <pre><code>github_graphql_url: str\n</code></pre> <p>Returns the GraphQL API URL. For example: https://api.github.com/graphql.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_head_ref <code>instance-attribute</code> <pre><code>github_head_ref: str\n</code></pre> <p>The head ref or source branch of the pull request in a workflow run. This property is only set when the event that triggers a workflow run is either pull_request or pull_request_target. For example, feature-branch-1.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_job <code>instance-attribute</code> <pre><code>github_job: str\n</code></pre> <p>The job_id of the current job. For example, greeting_job.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_output <code>instance-attribute</code> <pre><code>github_output: Path\n</code></pre> <p>The path on the runner to the file that sets the current step's outputs from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/work/_temp/_runner_file_commands/set_output_a50ef383-b063-46d9-9157-57953fc9f3f0. For more information, see \"Workflow commands for GitHub Actions\".</p> <code></code> github_custom_actions.github_vars.GithubVars.github_path <code>instance-attribute</code> <pre><code>github_path: Path\n</code></pre> <p>The path on the runner to the file that sets system PATH variables from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/work/_temp/_runner_file_commands/add_path_899b9445-ad4a-400c-aa89-249f18632cf5. For more information, see \"Workflow commands for GitHub Actions\".</p> <code></code> github_custom_actions.github_vars.GithubVars.github_ref <code>instance-attribute</code> <pre><code>github_ref: str\n</code></pre> <p>The fully-formed ref of the branch or tag that triggered the workflow run. For workflows triggered by push, this is the branch or tag ref that was pushed. For workflows triggered by pull_request, this is the pull request merge branch. For workflows triggered by release, this is the release tag created. For other triggers, this is the branch or tag ref that triggered the workflow run. This is only set if a branch or tag is available for the event type. The ref given is fully-formed, meaning that for branches the format is refs/heads/, for pull requests it is refs/pull//merge, and for tags it is refs/tags/. For example, refs/heads/feature-branch-1. <code></code> github_custom_actions.github_vars.GithubVars.github_ref_name <code>instance-attribute</code> <pre><code>github_ref_name: str\n</code></pre> <p>The short ref name of the branch or tag that triggered the workflow run. This value matches the branch or tag name shown on GitHub. For example, feature-branch-1. For pull requests, the format is /merge. <code></code> github_custom_actions.github_vars.GithubVars.github_ref_protected <code>instance-attribute</code> <pre><code>github_ref_protected: str\n</code></pre> <p>true if branch protections or rulesets are configured for the ref that triggered the workflow run.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_ref_type <code>instance-attribute</code> <pre><code>github_ref_type: str\n</code></pre> <p>The type of ref that triggered the workflow run. Valid values are branch or tag.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_repository <code>instance-attribute</code> <pre><code>github_repository: str\n</code></pre> <p>The owner and repository name. For example, octocat/Hello-World.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_repository_id <code>instance-attribute</code> <pre><code>github_repository_id: str\n</code></pre> <p>The ID of the repository. For example, 123456789. Note that this is different from the repository name.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_repository_owner <code>instance-attribute</code> <pre><code>github_repository_owner: str\n</code></pre> <p>The repository owner's name. For example, octocat.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_repository_owner_id <code>instance-attribute</code> <pre><code>github_repository_owner_id: str\n</code></pre> <p>The repository owner's account ID. For example, 1234567. Note that this is different from the owner's name.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_retention_days <code>instance-attribute</code> <pre><code>github_retention_days: str\n</code></pre> <p>The number of days that workflow run logs and artifacts are kept. For example, 90.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_run_attempt <code>instance-attribute</code> <pre><code>github_run_attempt: str\n</code></pre> <p>A unique number for each attempt of a particular workflow run in a repository. This number begins at 1 for the workflow run's first attempt, and increments with each re-run. For example, 3.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_run_id <code>instance-attribute</code> <pre><code>github_run_id: str\n</code></pre> <p>A unique number for each workflow run within a repository. This number does not change if you re-run the workflow run. For example, 1658821493.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_run_number <code>instance-attribute</code> <pre><code>github_run_number: str\n</code></pre> <p>A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run. For example, 3.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_server_url <code>instance-attribute</code> <pre><code>github_server_url: str\n</code></pre> <p>The URL of the GitHub server. For example: https://github.com.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_sha <code>instance-attribute</code> <pre><code>github_sha: str\n</code></pre> <p>The commit SHA that triggered the workflow. The value of this commit SHA depends on the event that triggered the workflow. For more information, see \"Events that trigger workflows.\" For example, ffac537e6cbbf934b08745a378932722df287a53.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_step_summary <code>instance-attribute</code> <pre><code>github_step_summary: Path\n</code></pre> <p>The path on the runner to the file that contains job summaries from workflow commands. This file is unique to the current step and changes for each step in a job. For example, /home/runner/_layout/_work/_temp/_runner_file_commands/step_summary_1cb22d7f-5663-41a8- 9ffc-13472605c76c. For more information, see \"Workflow commands for GitHub Actions\".</p> <code></code> github_custom_actions.github_vars.GithubVars.github_triggering_actor <code>instance-attribute</code> <pre><code>github_triggering_actor: str\n</code></pre> <p>The username of the user that initiated the workflow run. If the workflow run is a re-run, this value may differ from github.actor. Any workflow re-runs will use the privileges of github.actor, even if the actor initiating the re-run (github.triggering_actor) has different privileges.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_workflow <code>instance-attribute</code> <pre><code>github_workflow: str\n</code></pre> <p>The name of the workflow. For example, My test workflow. If the workflow file doesn't specify a name, the value of this variable is the full path of the workflow file in the repository.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_workflow_ref <code>instance-attribute</code> <pre><code>github_workflow_ref: str\n</code></pre> <p>The ref path to the workflow. For example, octocat/hello-world/.github/workflows/my-workflow.yml@ refs/heads/my_branch.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_workflow_sha <code>instance-attribute</code> <pre><code>github_workflow_sha: str\n</code></pre> <p>The commit SHA for the workflow file.</p> <code></code> github_custom_actions.github_vars.GithubVars.github_workspace <code>instance-attribute</code> <pre><code>github_workspace: Path\n</code></pre> <p>The default working directory on the runner for steps, and the default location of your repository when using the checkout action. For example, /home/runner/work/my-repo-name/my-repo-name.</p> <code></code> github_custom_actions.github_vars.GithubVars.runner_arch <code>instance-attribute</code> <pre><code>runner_arch: str\n</code></pre> <p>The architecture of the runner executing the job. Possible values are X86, X64, ARM, or ARM64.</p> <code></code> github_custom_actions.github_vars.GithubVars.runner_debug <code>instance-attribute</code> <pre><code>runner_debug: str\n</code></pre> <p>This is set only if debug logging is enabled, and always has the value of 1. It can be useful as an indicator to enable additional debugging or verbose logging in your own job steps.</p> <code></code> github_custom_actions.github_vars.GithubVars.runner_name <code>instance-attribute</code> <pre><code>runner_name: str\n</code></pre> <p>The name of the runner executing the job. This name may not be unique in a workflow run as runners at the repository and organization levels could use the same name. For example, Hosted Agent</p> <code></code> github_custom_actions.github_vars.GithubVars.runner_os <code>instance-attribute</code> <pre><code>runner_os: str\n</code></pre> <p>The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS. For example, Windows</p> <code></code> github_custom_actions.github_vars.GithubVars.runner_temp <code>instance-attribute</code> <pre><code>runner_temp: Path\n</code></pre> <p>The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them. For example, D:\\a_temp</p> <code></code> github_custom_actions.github_vars.GithubVars.runner_tool_cache <code>instance-attribute</code> <pre><code>runner_tool_cache: str\n</code></pre> <p>The path to the directory containing preinstalled tools for GitHub-hosted runners. For more information, see \"Using GitHub-hosted runners\". For example, C:\\hostedtoolcache\\windows</p>"},{"location":"reference/#github_custom_actions.inputs_outputs","title":"github_custom_actions.inputs_outputs","text":"<p>Github Actions helper functions.</p> <p>We want to support Python 3.7 that you still have on some self-hosted action runners. So no fancy features like walrus operator, @cached_property, etc.</p>"},{"location":"reference/#github_custom_actions.inputs_outputs-attributes","title":"Attributes","text":""},{"location":"reference/#github_custom_actions.inputs_outputs.INPUT_PREFIX","title":"github_custom_actions.inputs_outputs.INPUT_PREFIX  <code>module-attribute</code>","text":"<pre><code>INPUT_PREFIX = 'INPUT_'\n</code></pre>"},{"location":"reference/#github_custom_actions.inputs_outputs-classes","title":"Classes","text":""},{"location":"reference/#github_custom_actions.inputs_outputs.ActionInputs","title":"github_custom_actions.inputs_outputs.ActionInputs","text":"<p>               Bases: <code>EnvAttrDictVars</code></p> <p>GitHub Action input variables.</p> <p>Usage:     <pre><code>class MyInputs(ActionInputs):\n    my_input: str\n\naction = ActionBase(inputs=MyInputs())\nprint(action.inputs.my_input)\nprint(action.inputs[\"my-input\"])  # the same as above\n</code></pre></p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Attribute names are converted to <code>kebab-case</code>. So <code>action.inputs.my_input</code> is the same as <code>action.inputs[\"my-input\"]</code>.</p> <p>If you need to access a <code>snake_case</code> named input <code>my_input</code>, you should use dict-style only: <code>action.inputs[\"my_input\"]</code>. But it's common to use <code>kebab-case</code> in GitHub Actions input names.</p> <p>By GitHub convention, all input names are upper-cased in the environment and prefixed with \"INPUT_\". So <code>actions.inputs.my_input</code> or <code>actions.inputs['my-input']</code> will be the variable <code>INPUT_MY-INPUT</code> in the environment. The ActionInputs does the conversion automatically.</p> <p>Uses lazy loading of the values. So the value is read from the environment only when accessed and only once, and saved in the object's internal dict.</p>"},{"location":"reference/#github_custom_actions.inputs_outputs.ActionOutputs","title":"github_custom_actions.inputs_outputs.ActionOutputs","text":"<p>               Bases: <code>FileAttrDictVars</code></p> <p>GitHub Actions output variables.</p> <p>Usage:    <pre><code>class MyOutputs(ActionOutputs):\n    my_output: str\n\naction = ActionBase(outputs=MyOutputs())\naction.outputs[\"my-output\"] = \"value\"\naction.outputs.my_output = \"value\"  # the same as above\n</code></pre></p> <p>With attributes, you can only access explicitly declared vars, with dict-like access you can access any var. This way you can find your balance between strictly defined vars and flexibility.</p> <p>Attribute names are converted to <code>kebab-case</code>. So <code>action.outputs.my_output</code> is the same as <code>action.outputs[\"my-output\"]</code>.</p> <p>If you need to access a <code>snake_case</code> named output like <code>my_output</code> you should use dict-style only: <code>action.outputs[\"my_output\"]</code>. But it's common to use <code>kebab-case</code> in GitHub Actions output names.</p> <p>Each output var assignment changes the GitHub outputs file (the path is defined as <code>action.env.github_output</code>).</p>"},{"location":"render/","title":"Render","text":""},{"location":"render/#github_custom_actions.ActionBase.render","title":"github_custom_actions.ActionBase.render","text":"<pre><code>render(template: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render the template from the string with Jinja.</p> <p><code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>So you can use something like: <pre><code>self.render(\"### {{ inputs.name }}!\\nHave a nice day!\")\n</code></pre></p>"},{"location":"render/#github_custom_actions.ActionBase.render_template","title":"github_custom_actions.ActionBase.render_template","text":"<pre><code>render_template(template_name: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Render template from the <code>templates</code> directory.</p> <p><code>template_name</code> is the name of the template file without the extension. <code>kwargs</code> are the template context variables.</p> <p>Also includes to the context the action's <code>inputs</code>, <code>outputs</code>, and <code>env</code>.</p> <p>Usage: <pre><code>self.render_template(\"executor.json\", image=\"ubuntu-latest\")\n</code></pre></p>"},{"location":"summary/","title":"Summary","text":"<p><code>summary</code> property of ActionBase implements FileTextProperty connecting it to file specified in Github Step Summary.</p> <p>In this file your action can return some markdown to include in the summary of the step.</p> <p>You use the property just like <code>str</code>, for example</p> <pre><code>class MyAction(ActionBase):\n    def main(self):\n        self.summary.text += (\n            self.render(\n                \"### Hello {{ inputs['name'] }}!\\n\"\n                \"Have a nice day!\"\n            )\n        )\n</code></pre> <p>Here we use render() to create text for the summary.</p> <p>In the Github workflow summary it will look something like this:</p>"},{"location":"summary/#hello-john","title":"Hello John!","text":"<p>Have a nice day!</p>"}]}